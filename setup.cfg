[metadata]
name = ironic-inspector
summary = Hardware introspection for OpenStack Bare Metal
description-file = README.rst
home-page = https://launchpad.net/ironic-inspector
license = Apache-2
classifier =
    Environment :: Console
    Environment :: OpenStack
    Intended Audience :: System Administrators
    Intended Audience :: Information Technology
    License :: OSI Approved :: Apache Software License
    Operating System :: OS Independent
    Programming Language :: Python
    Programming Language :: Python :: 2

[files]
packages =
    ironic_inspector

[entry_points]
console_scripts =
    ironic-inspector = ironic_inspector.main:main
ironic_inspector.hooks.processing =
    scheduler = ironic_inspector.plugins.standard:SchedulerHook
    validate_interfaces = ironic_inspector.plugins.standard:ValidateInterfacesHook
    ramdisk_error = ironic_inspector.plugins.standard:RamdiskErrorHook
    example = ironic_inspector.plugins.example:ExampleProcessingHook
    extra_hardware = ironic_inspector.plugins.extra_hardware:ExtraHardwareHook
    raid_device = ironic_inspector.plugins.raid_device:RaidDeviceDetection
    # Deprecated name
    root_device_hint = ironic_inspector.plugins.raid_device:RaidDeviceDetection
ironic_inspector.hooks.node_not_found =
    example = ironic_inspector.plugins.example:example_not_found_hook
ironic_inspector.rules.conditions =
    eq = ironic_inspector.plugins.rules:EqCondition
    lt = ironic_inspector.plugins.rules:LtCondition
    gt = ironic_inspector.plugins.rules:GtCondition
    le = ironic_inspector.plugins.rules:LeCondition
    ge = ironic_inspector.plugins.rules:GeCondition
    ne = ironic_inspector.plugins.rules:NeCondition
ironic_inspector.rules.actions =
    example = ironic_inspector.plugins.example:ExampleRuleAction
    fail = ironic_inspector.plugins.rules:FailAction
    set-attribute = ironic_inspector.plugins.rules:SetAttributeAction
oslo.config.opts =
    ironic_inspector = ironic_inspector.conf:list_opts
    ironic_inspector.common.swift = ironic_inspector.common.swift:list_opts

[compile_catalog]
directory = locale
domain = ironic-inspector

[update_catalog]
domain = ironic-inspector
output_dir = locale
input_file = ironic-inspector/locale/ironic-inspector.pot

[extract_messages]
keywords = _ gettext ngettext l_ lazy_gettext
mapping_file = babel.cfg
output_file = ironic-inspector/locale/ironic-inspector.pot
